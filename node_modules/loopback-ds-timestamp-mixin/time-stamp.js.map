{"version":3,"sources":["time-stamp.js"],"names":[],"mappings":";;;;;;;;;;sBAAmB,SAAS;;;;AAC5B,IAAM,KAAK,GAAG,yBAAQ,CAAC;;qBAER,UAAC,KAAK,EAAmB;MAAjB,OAAO,yDAAG,EAAE;;AAEjC,OAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;;AAEvD,SAAO,GAAG,SAAc,EAAC,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAC,EAAE,OAAO,CAAC,CAAC;;AAEnG,OAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;;AAE1B,OAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;AACtE,MAAI,KAAK,CAAC,QAAQ,CAAC,cAAc,IAAI,OAAO,CAAC,QAAQ,EAAE;AACrD,WAAO,CAAC,IAAI,CAAC,+FAA+F,CAAC,CAAC;GAC/G;AACD,OAAK,CAAC,QAAQ,CAAC,cAAc,GAAG,KAAK,CAAC;;AAEtC,OAAK,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,EAAE,EAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;AACpG,OAAK,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,EAAE,EAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAC,CAAC,CAAC;;AAElF,OAAK,CAAC,OAAO,CAAC,aAAa,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AAC1C,SAAK,CAAC,aAAa,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;AAClC,QAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE;AAAE,aAAO,IAAI,EAAE,CAAC;KAAE;AAChE,QAAI,GAAG,CAAC,QAAQ,EAAE;AAChB,WAAK,CAAC,uBAAuB,EAAE,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACxF,SAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;KAC9C,MAAM;AACL,WAAK,CAAC,iCAAiC,EAAE,GAAG,CAAC,KAAK,CAAC,eAAe,EAAE,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;AAClG,SAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;KAC1C;AACD,QAAI,EAAE,CAAC;GACR,CAAC,CAAC;CAEJ","file":"time-stamp.js","sourcesContent":["import _debug from './debug';\nconst debug = _debug();\n\nexport default (Model, options = {}) => {\n\n  debug('TimeStamp mixin for Model %s', Model.modelName);\n\n  options = Object.assign({createdAt: 'createdAt', updatedAt: 'updatedAt', required: true}, options);\n\n  debug('options', options);\n\n  debug('Model.settings.validateUpsert', Model.settings.validateUpsert);\n  if (Model.settings.validateUpsert && options.required) {\n    console.warn('TimeStamp mixin requires validateUpsert be false. See @clarkbw/loopback-ds-timestamp-mixin#10');\n  }\n  Model.settings.validateUpsert = false;\n\n  Model.defineProperty(options.createdAt, {type: Date, required: options.required, defaultFn: 'now'});\n  Model.defineProperty(options.updatedAt, {type: Date, required: options.required});\n\n  Model.observe('before save', (ctx, next) => {\n    debug('ctx.options', ctx.options);\n    if (ctx.options && ctx.options.skipUpdatedAt) { return next(); }\n    if (ctx.instance) {\n      debug('%s.%s before save: %s', ctx.Model.modelName, options.updatedAt, ctx.instance.id);\n      ctx.instance[options.updatedAt] = new Date();\n    } else {\n      debug('%s.%s before update matching %j', ctx.Model.pluralModelName, options.updatedAt, ctx.where);\n      ctx.data[options.updatedAt] = new Date();\n    }\n    next();\n  });\n\n};\n"],"sourceRoot":"/Users/clarkbw/src/pi/loopback-ds-timestamp-mixin/es6"}